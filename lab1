DA_32       EQU 4000h   ; 32 位段  
DA_DRW      EQU 92h ; 存在的可读写数据段属性值  
DA_C        EQU 98h ; 存在的只执行代码段属性值  
%macro Descriptor 3  
    dw  %2 & 0FFFFh             ; 段界限1  
    dw  %1 & 0FFFFh             ; 段基址1  
    db  (%1 >> 16) & 0FFh         ; 段基址2  
    dw  ((%2 >> 8) & 0F00h) | (%3 & 0F0FFh)   ; 属性1 + 段界限2 + 属性2  
    db  (%1 >> 24) & 0FFh         ; 段基址3  
%endmacro ; 共 8 字节  
org 07c00h  
    jmp LABEL_BEGIN  
[SECTION .gdt]  
; GDT  
;                                    段基址,    段界限 ,    属性  
GDT_START:  
Descriptor_DUMMY:      Descriptor       0,       0,            0           ; 空描述符  
Descript_CODE32:     Descriptor       0,       0xffffffff,   DA_C + DA_32; 非一致代码段  
Descriptor_VIDEO:    Descriptor 0B8000h,       0ffffh,       DA_DRW      ; 显存首地址  
; GDT 结束  
  
GdtLen      equ $ - GDT_START   ; GDT长度  
GdtPtr      dw  GdtLen - 1  ; GDT界限  
                    dd  0       ; GDT基地址  
  
; END of [SECTION .gdt]  
  
[SECTION .s16]  
[BITS   16]  
LABEL_BEGIN:  
    mov ax, cs  
    mov ds, ax  
    mov es, ax  
    mov ss, ax  
    mov sp, 0100h  
      
    mov ax, BootMessage    
         mov bp, ax          ; ES:BP = 串地址    
          mov cx, 16          ; CX = 串长度    
          mov ax, 01301h      ; AH = 13,  AL = 01h    
         mov bx, 000ch       ; 页号为0(BH = 0) 黑底红字(BL = 0Ch,高亮)    
         mov dl, 0    
         int 10h         ; 10h 号中断   
  
      
    ; 为加载 GDTR 作准备  
    xor eax, eax  
    mov ax, ds  
    shl eax, 4  
    add eax, GDT_START      ; eax <- gdt 基地址  
    mov dword [GdtPtr + 2], eax ; [GdtPtr + 2] <- gdt 基地址  
  
    ; 加载 GDTR  
    lgdt    [GdtPtr]  
  
    ; 关中断  
    cli  
  
    ; 打开地址线A20  
    in  al, 92h  
    or  al, 00000010b  
    out 92h, al  
  
    ; 准备切换到保护模式  
    mov eax, cr0  
    or  eax, 1  
    mov cr0, eax  
  
    ; 真正进入保护模式  
    jmp dword 8:LABEL_SEG_CODE32    ; 执行这一句会把 SelectorCode32 装入 cs,  
                    ; 并跳转到 Code32Selector:0  处  
BootMessage:        db  "Hello, OS world!"   
; END of [SECTION .s16]  
  
  
[SECTION .s32]; 32 位代码段. 由实模式跳入.  
[BITS   32]  
  
LABEL_SEG_CODE32:  
    mov ax, 0x10  
    mov gs, ax          ; 视频段选择子(目的)  
  
    mov edi, (80 * 11 + 79) * 2 ; 屏幕第 11 行, 第 79 列。  
    mov ah, 0Ch         ; 0000: 黑底    1100: 红字  
    mov al, 'P'  
    mov [gs:edi], ax  
  
    ; 到此停止  
    jmp $  
  
SegCode32Len    equ $ - LABEL_SEG_CODE32  
; END of [SECTION .s32] 
